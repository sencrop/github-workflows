---
name: Deploy a standard ECS application

on:
  workflow_call:
    inputs:
      aws_region:
        type: string
        default: "eu-central-1"
      ci_iam_role:
        type: string
        default: ""
      docker_image_tag:
        type: string
        required: true
      environment:
        type: string
        required: true
      extra_args:
        type: string
        default: ""
      log_level:
        type: string
        default: "INFO"
      notify_on_success:
        type: boolean
        default: false
      self_hosted:
        type: boolean
        default: false
      service:
        type: string
        required: true
      slack_channel:
        type: string
        required: true
      terraform_version:
        type: string
        required: true
      wait_for_stabilization:
        type: boolean
        default: true
      working_directory:
        type: string
        default: "./infra/terraform"

jobs:
  deploy:
    runs-on: ${{ inputs.self_hosted && fromJSON(format('["self-hosted","{0}"]', inputs.environment)) || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      CI_IAM_ROLE: ${{ inputs.ci_iam_role }}
      DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}
      ENV: ${{ inputs.environment }}
      EXTRA_ARGS: ${{ inputs.extra_args }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_URL: ${{ github.server_url }}/${{ github.repository }}
      GITHUB_ACTIONS_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      LOGS_URL: https://app.datadoghq.eu/logs?query=service%3A${{ inputs.service }}%20version%3A${{ inputs.docker_image_tag }}%20env%3A${{ inputs.environment }}
      SERVICE: ${{ inputs.service }}
      TF_WORKSPACE: ${{ inputs.environment }}
      TF_LOG: ${{ inputs.log_level }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Compute IAM role
        id: ci_identity
        run: |
          if [[ -z "$CI_IAM_ROLE" ]]; then
            echo "iam_role=github-actions-$(echo "$GITHUB_REPOSITORY" | awk -F'/' '{print tolower($2)}')" >> ${GITHUB_OUTPUT}
          else
            echo "iam_role=$CI_IAM_ROLE" >> ${GITHUB_OUTPUT}
          fi

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          # AWS_ACCOUNT_ID is defined at the github organisation level
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ steps.ci_identity.outputs.iam_role }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      - name: Get current version
        id: current_version
        run: |
          CURRENT_TASK_DEFINITION=$(aws ecs list-task-definitions | jq --arg SERVICE "$SERVICE" --arg ENVIRONMENT "$ENV" -r -c '.taskDefinitionArns[] | select(contains($SERVICE + "-" + $ENVIRONMENT))')
          CURRENT_IMAGE_TAG=$(aws ecs describe-task-definition --task-definition $CURRENT_TASK_DEFINITION | jq --arg SERVICE "$SERVICE" -r -c '.taskDefinition.containerDefinitions[] | select(.name == $SERVICE) | .image' | cut -d':' -f2)
          echo "image_tag=$CURRENT_IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Notify deployment in progress
        if: inputs.environment  == 'production'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: deployment-updates-prod
          slack-message: ":ship: New deployment of `${{ inputs.service }}` (version `${{ inputs.docker_image_tag }}`) in progress (<${{ env.GITHUB_REPOSITORY_URL }}/compare/${{ steps.current_version.outputs.image_tag }}...${{ inputs.docker_image_tag }}|CHANGELOG>)"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Terraform apply
        run: terraform apply -var "docker_image_tag=${DOCKER_IMAGE_TAG}" -var-file=${ENV}.tfvars -auto-approve -input=false ${EXTRA_ARGS}

      - name: Wait for stabilization
        if: ${{ inputs.wait_for_stabilization }}
        run: |
          if !(aws ecs wait services-stable --cluster "main-${ENV}" --service "${SERVICE}"); then
            echo "/!\/!\/!\ The deployment has failed to stabilize after 10 minutes !"
            echo "It likely means that this new version is crashing on start up."
            echo "You should check the logs to understand what happened: ${LOGS_URL}"
            exit 1
          fi

      - name: Notify success
        if: ${{ inputs.notify_on_success }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.slack_channel }}
          slack-message: ":white_check_mark: A new version of `${{ inputs.service }}` (version `${{ inputs.docker_image_tag }}`) has been successfully deployed to ${{ env.ENV }} (<${{ env.GITHUB_ACTIONS_URL }}|Github Actions>|<${{ env.LOGS_URL }}|Logs>)."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: ${{ inputs.slack_channel }}
          slack-message: ":rotating_siren: The last deployment of `${{ inputs.service }}` (version `${{ inputs.docker_image_tag }}`) to ${{ env.ENV }} has failed (<${{ env.GITHUB_ACTIONS_URL }}|Github Actions>|<${{ env.LOGS_URL }}|Logs>)."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

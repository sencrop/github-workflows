---
name: Deploy a standard ECS application

on:
  workflow_call:
    inputs:
      aws_region:
        type: string
        default: "eu-central-1"
      ci_iam_role:
        type: string
        default: ""
      environment:
        type: string
        required: true
      extra_args:
        type: string
        default: ""
      log_level:
        type: string
        default: "INFO"
      notify_on_success:
        type: boolean
        default: false
      self_hosted:
        type: boolean
        default: false
      service:
        type: string
        required: true
      slack_channel:
        type: string
        required: true
      terraform_version:
        type: string
        required: false
      use_version_as_docker_image_tag:
        type: boolean
        default: true
        required: false
      version:
        type: string
        required: false
      wait_for_stabilization:
        type: boolean
        default: true
      working_directory:
        type: string
        default: "./infra/terraform"

jobs:
  deploy:
    runs-on: ${{ inputs.self_hosted && fromJSON(format('["self-hosted","{0}"]', inputs.environment)) || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      CI_IAM_ROLE: ${{ inputs.ci_iam_role }}
      DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}
      ENV: ${{ inputs.environment }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_REPOSITORY_URL: ${{ github.server_url }}/${{ github.repository }}
      GITHUB_ACTIONS_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      LOGS_URL: https://app.datadoghq.eu/logs?query=service%3A${{ inputs.service }}%20version%3A${{ inputs.docker_image_tag }}%20env%3A${{ inputs.environment }}
      SERVICE: ${{ inputs.service }}
      TF_WORKSPACE: ${{ inputs.environment }}
      TF_LOG: ${{ inputs.log_level }}
    permissions:
      actions: write
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: sencrop/github-workflows/actions/configure-aws-credentials@master
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ inputs.aws_region }}
          ci_iam_role: ${{ inputs.ci_iam_role }}

      - name: Terraform setup
        uses: sencrop/github-workflows/actions/setup-terraform@master
        with:
          terraform_version: ${{ inputs.terraform_version }}
          working_directory: ${{ inputs.working_directory }}

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      - name: Get former version from ECS
        if: inputs.docker_image_tag || inputs.use_version_as_docker_image_tag
        id: ecs_lookup
        run: |
          CURRENT_TASK_DEFINITION="$(aws ecs list-task-definitions | jq --arg SERVICE "$SERVICE" --arg ENVIRONMENT "$ENV" -r -c '.taskDefinitionArns[] | select(contains($SERVICE + "-" + $ENVIRONMENT))')"
          CURRENT_IMAGE_TAG="$(aws ecs describe-task-definition --task-definition "$CURRENT_TASK_DEFINITION" | jq --arg SERVICE "$SERVICE" -r -c '.taskDefinition.containerDefinitions[] | select(.name == $SERVICE) | .image' | cut -d':' -f2)"
          echo "image_tag=$CURRENT_IMAGE_TAG" >> "$GITHUB_OUTPUT"


      - name: Get former version from Git
        id: git_hash
        if: "!inputs.use_version_as_docker_image_tag"
        uses: sencrop/github-workflows/actions/lookup-git-hash@master

      - name: Notify deployment in progress
        uses: sencrop/github-workflows/actions/notify-deployment-in-progress@master
        with:
          service: ${{ inputs.service }}
          environment: ${{ inputs.environment }}
          dd_api_key: ${{ secrets.DD_API_KEY }}
          former_version: ${{ steps.ecs_lookup.outputs.image_tag || steps.git_hash.outputs.previous }}
          new_version: ${{ inputs.docker_image_tag || inputs.version }}
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Build tf_vars (using version)
        if: "inputs.use_version_as_docker_image_tag"
        id: tf_vars
        run: |
          TF_VAR_DOCKER_IMAGE_TAG="-var docker_image_tag=${{ inputs.version }}"
          echo "docker_image_tag=$TF_VAR_DOCKER_IMAGE_TAG" >> "$GITHUB_OUTPUT"


      - name: Terraform apply
        run: |
          # shellcheck disable=SC2086
          terraform apply ${{ steps.tf_vars.outputs.docker_image_tag || steps.tf_vars_deprecated.outputs.docker_image_tag }} -var-file=${{ inputs.environment }}.tfvars -auto-approve -input=false ${{ inputs.extra_args }}

      - name: Wait for stabilization
        if: ${{ inputs.wait_for_stabilization }}
        run: |
          if ! (aws ecs wait services-stable --cluster "main-${ENV}" --service "${SERVICE}"); then
            echo "/!\/!\/!\ The deployment has failed to stabilize after 10 minutes !"
            echo "It likely means that this new version is crashing on start up."
            echo "You should check the logs to understand what happened: ${LOGS_URL}"
            exit 1
          fi

      - name: Track deployment time
        uses: sencrop/github-workflows/actions/track-deployment-time@master
        with:
          service: ${{ inputs.service }}
          environment: ${{ inputs.environment }}
          dd_api_key: ${{ secrets.DD_API_KEY }}

      - name: Notify success
        if: ${{ inputs.notify_on_success }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ inputs.slack_channel }}
          slack-message: ":white_check_mark: A new version of `${{ inputs.service }}` (version `${{ inputs.docker_image_tag }}`) has been successfully deployed to ${{ env.ENV }} (<${{ env.GITHUB_ACTIONS_URL }}|Github Actions>|<${{ env.LOGS_URL }}|Logs>)."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: ${{ inputs.slack_channel }}
          slack-message: ":rotating_siren: The last deployment of `${{ inputs.service }}` (version `${{ inputs.docker_image_tag }}`) to ${{ env.ENV }} has failed (<${{ env.GITHUB_ACTIONS_URL }}|Github Actions>|<${{ env.LOGS_URL }}|Logs>)."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

---
name: Terraform apply

on:
  workflow_call:
    inputs:
      aws_region:
        type: string
        default: "eu-central-1"
      ci_iam_role:
        type: string
        default: ""
      environment:
        type: string
        required: true
      extra_args:
        type: string
        default: ""
      log_level:
        type: string
        default: "INFO"
      self_hosted:
        type: boolean
        default: false
      terraform_version:
        type: string
        required: false
      working_directory:
        type: string
        required: true


jobs:
  apply:
    runs-on: ${{ inputs.self_hosted && fromJSON(format('["self-hosted","{0}"]', inputs.environment)) || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      CI_IAM_ROLE: ${{ inputs.ci_iam_role }}
      ENV: ${{ inputs.environment }}
      EXTRA_ARGS: ${{ inputs.extra_args }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_WORKSPACE: ${{ inputs.environment }}
      TF_LOG: ${{ inputs.log_level }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Compute IAM role
        id: ci_identity
        run: |
          if [[ -z "$CI_IAM_ROLE" ]]; then
            echo "iam_role=github-actions-$(echo "$GITHUB_REPOSITORY" | awk -F'/' '{print tolower($2)}')" >> ${GITHUB_OUTPUT}
          else
            echo "iam_role=$CI_IAM_ROLE" >> ${GITHUB_OUTPUT}
          fi

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          # AWS_ACCOUNT_ID is defined at the github organisation level
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ steps.ci_identity.outputs.iam_role }}

      - name: Compute terraform version
        id: terraform_version
        run: |
          set -eo pipefail
          if [[ -z "$TF_VERSION" ]]; then
            TF_VERSION=$(cat main.tf | grep required_version | awk -F'"' '{print $2}')
            if [[ ! "$TF_VERSION" =~ ^[0-9]\.[0-9]\.[0-9]$ ]]; then
              echo "Unsupported terraform version format $TF_VERSION, please use strict version pinning"
              exit 1
            fi
          fi
          echo "version=$TF_VERSION" >> ${GITHUB_OUTPUT}
        env:
          TF_VERSION: ${{ inputs.terraform_version }}

      - name: Terraform setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.terraform_version.outputs.version }}

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      - name: Terraform apply
        run: terraform apply -var-file=${ENV}.tfvars -auto-approve -input=false ${EXTRA_ARGS}

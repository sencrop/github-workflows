---
name: Terraform plan

on:
  workflow_call:
    inputs:
      aws_region:
        type: string
        default: "eu-central-1"
      ci_iam_role:
        type: string
        default: ""
      environments:
        type: string
        default: "['preproduction', 'production']"
      extra_args:
        type: string
        default: ""
      log_level:
        type: string
        default: "INFO"
      self_hosted:
        type: boolean
        default: false
      terraform_version:
        type: string
        required: false
      working_directory:
        type: string
        required: true

jobs:
  plan:
    runs-on: ${{ inputs.self_hosted && fromJSON(format('["self-hosted","{0}"]', matrix.environment)) || 'ubuntu-latest' }}
    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}
    strategy:
      # we want both plans to complete if one fails
      fail-fast: false
      matrix:
        # Array input type is currently not supported https://github.com/community/community/discussions/11692
        environment: ${{ fromJson(inputs.environments) }}
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      CI_IAM_ROLE: ${{ inputs.ci_iam_role }}
      ENV: ${{ matrix.environment }}
      EXTRA_ARGS: ${{ inputs.extra_args }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TF_WORKSPACE: ${{ matrix.environment }}
      TF_LOG: ${{ inputs.log_level }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure aws credentials
        uses: sencrop/github-workflows/actions/configure-aws-credentials@master
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ inputs.aws_region }}
          ci_iam_role: ${{ inputs.ci_iam_role }}

      - name: Terraform setup
        uses: sencrop/github-workflows/actions/setup-terraform@master
        with:
          terraform_version: ${{ inputs.terraform_version }}
          working_directory: ${{ inputs.working_directory }}

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      # inspired by https://blog.testdouble.com/posts/2021-12-07-elevate-your-terraform-workflow-with-github-actions/
      - name: Terraform plan
        id: plan
        run: terraform plan -var-file=${ENV}.tfvars -input=false -no-color -out=tfplan ${EXTRA_ARGS}

        # 1. remove everything before the plan output
        # 2. remove github actions output
        # 3. move +/- at the beggining of the line to leverage github diff display
      - name: Clean and reformat Plan
        run: |
          if terraform show -no-color tfplan | grep "Terraform will perform the following actions"; then
            terraform show -no-color tfplan |\
            sed '/Terraform will perform the following actions/,$!d' |\
            sed '/^::/d' |\
            sed -E 's/^([[:space:]]+)([-+])/\2\1/g'\ > plan.txt
          else
            echo "No changes. Your infrastructure matches the configuration." > plan.txt
          fi

      # Some plans may rarely contain backticks which break the following javascript code to create a comment and
      # show the plan, so we need to remove them first
      - name: Put Plan in Env Var
        run: |
          sed 's|`|\\\`|g' plan.txt > safe_plan.txt
          PLAN=$(cat safe_plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const commentTitle = ':potted_plant: \`${{ matrix.environment }}\` terraform plan for \`${{ inputs.working_directory }}\`'
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes(commentTitle)
            })
            const output = `#### ${commentTitle}
            \`\`\`diff\n
            ${{ env.PLAN }}
            \`\`\`
            `
            // Update a comment if it already exists
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

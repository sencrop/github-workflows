---
name: Docker build and push

on:
  workflow_call:
    inputs:
      aws_region:
        type: string
        default: "eu-central-1"
      build_context:
        type: string
        default: "."
      cache_docker_layers:
        type: boolean
        default: false
      ci_iam_role:
        type: string
        default: ""
      image_name:
        type: string
        required: true
      image_tag:
        type: string
        required: true
      cpu_architecture:
        type: string
        description: "x86_64 or arm64"
      use_ssh:
        type: boolean
        default: false
      file:
        type: string
        required: false
    secrets:
      OLYMPE_4_DEMETER:
        required: false
      OLYMPE_4_SISYPHE:
        required: false
      SSH_PRIVATE_KEY:
        required: false

jobs:
  push:
    runs-on: ${{ inputs.cpu_architecture == 'x86_64' && 'ubuntu-latest' || format('ubuntu-latest-{0}', inputs.cpu_architecture) }}
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws_region }}
      AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
      CI_IAM_ROLE: ${{ inputs.ci_iam_role }}
      IMAGE_TAG: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.eu-central-1.amazonaws.com/${{ inputs.image_name }}:${{ inputs.image_tag }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure aws credentials
        uses: sencrop/github-workflows/actions/configure-aws-credentials@master
        with:
          aws_account_id: ${{ vars.AWS_ACCOUNT_ID }}
          aws_region: ${{ inputs.aws_region }}
          ci_iam_role: ${{ inputs.ci_iam_role }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com

      - name: Start ssh agent
        if: ${{ inputs.use_ssh }}
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.OLYMPE_4_DEMETER || secrets.OLYMPE_4_SISYPHE || secrets.SSH_PRIVATE_KEY }}

      - name: Set ssh parameter
        id: set_ssh
        if: ${{ inputs.use_ssh }}
        run: |
          echo "ssh=main=$SSH_AUTH_SOCK" >> "${GITHUB_OUTPUT}"

      - name: Build (with cache)
        if: ${{ inputs.cache_docker_layers }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.file || format('{0}/Dockerfile', inputs.build_context) }}
          load: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          ssh: ${{ steps.set_ssh.outputs.ssh }}
          provenance: false

      - name: Build (without cache)
        if: ${{ ! inputs.cache_docker_layers }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.file || format('{0}/Dockerfile', inputs.build_context) }}
          load: true
          tags: ${{ env.IMAGE_TAG }}
          ssh: ${{ steps.set_ssh.outputs.ssh }}
          provenance: false

      - name: Push to ECR
        run: |
          #!/bin/bash
          set -euo pipefail
          IFS=$'\n\t'
          if ! docker push "$IMAGE_TAG"; then
            # the first time we try to push the repository won't exist and will be dynamically created so we retry after 30 seconds
            sleep 30
            docker push "$IMAGE_TAG"
          fi

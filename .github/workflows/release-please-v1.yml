---
name: Manage releases

on:
  workflow_call:
    inputs:
      create_pull_request:
        type: boolean
        default: true
        description: if true the workflow will create a release PR otherwise a github release is directly created
      runs_on:
        type: string
        default: ubuntu-latest

    outputs:
      prs_created:
        value: ${{ jobs.release-please.outputs.prs_created }}
      releases_created:
        value: ${{ jobs.release-please.outputs.releases_created }}
      pr:
        value: ${{ jobs.release-please.outputs.pr }}

jobs:
  release-please:
    runs-on: ${{ inputs.runs_on }}
    outputs:
      prs_created: ${{ steps.release_please.outputs.prs_created }}
      releases_created: ${{ steps.release_please.outputs.releases_created }}
      pr: ${{ steps.release_please.outputs.pr }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # from https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app
      - name: Get app token
        id: app_token
        env:
          CREDENTIALS: ${{ secrets.SENCROP_BOT_CREDENTIALS_TOKEN }}
        run: |
          #!/usr/bin/env bash
          set -o pipefail

          if [[ -z "$CREDENTIALS" ]]; then
            echo "missing credentials"
            exit 1
          fi

          client_id=$(echo "$CREDENTIALS" | base64 --decode | jq -r .appId)
          pem=$(echo "$CREDENTIALS" | base64 --decode | jq -r .privateKey)
          installation_id=$(echo "$CREDENTIALS" | base64 --decode | jq -r .installationId)

          now=$(date +%s)
          iat=$((now - 60)) # Issues 60 seconds in the past
          exp=$((now + 600)) # Expires 10 minutes in the future

          b64enc() { openssl base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n'; }

          header_json='{
              "typ":"JWT",
              "alg":"RS256"
          }'
          # Header encode
          header=$( echo -n "${header_json}" | b64enc )

          payload_json='{
              "iat":'"${iat}"',
              "exp":'"${exp}"',
              "iss":'"${client_id}"'
          }'
          # Payload encode
          payload=$( echo -n "${payload_json}" | b64enc )
          #
          # Signature
          header_payload="${header}"."${payload}"
          signature=$(
              openssl dgst -sha256 -sign <(echo -n "${pem}") \
              <(echo -n "${header_payload}") | b64enc
          )
          #
          # Create JWT
          JWT="${header_payload}"."${signature}"

          # Request access token
          token=$(curl --request POST \
            --url "https://api.github.com/app/installations/$installation_id/access_tokens" \
            --header "Accept: application/vnd.github+json" \
            --header "Authorization: Bearer $JWT" \
            --header "X-GitHub-Api-Version: 2022-11-28" | jq -r .token)

          echo "token=$token" >> "$GITHUB_OUTPUT"

      - name: Run release-please
        if: inputs.create_pull_request
        id: release_please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ steps.app_token.outputs.token }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: Write .releaserc
        if: "! inputs.create_pull_request"
        run: |
          echo '{
            "plugins": [
              [
                "@semantic-release/commit-analyzer",
                {
                  "releaseRules": [
                    { "type": "feat", "release": "minor" },
                    { "type": "fix", "release": "patch" },
                    { "type": "refactor", "release": "patch" },
                    { "type": "chore", "release": "patch" },
                    { "type": "docs", "release": "patch" },
                    { "type": "deps", "release": "patch" },
                    { "type": "ci", "release": "patch" },
                    { "type": "perf", "release": "patch" },
                    { "type": "build", "release": "patch" },
                    { "type": "style", "release": "patch" },
                    { "type": "test", "release": "patch" }
                  ]
                }
              ],
              [
                "@semantic-release/release-notes-generator",
                {
                  "preset": "conventionalcommits",
                  "presetConfig": {
                    "types": [
                      { "type": "feat", "section": "New features", "hidden": false },
                      { "type": "fix", "section": "Bug fixes", "hidden": false },
                      { "type": "chore", "section": "Miscellaneous Chores", "hidden": false },
                      { "type": "refactor", "section": "Code refactoring", "hidden": false },
                      { "type": "docs", "section": "Documentation", "hidden": false },
                      { "type": "deps", "section": "Dependencies update", "hidden": false },
                      { "type": "ci", "section": "CI configuration", "hidden": false },
                      { "type": "perf", "section": "Performance improvements", "hidden": false },
                      { "type": "build", "section": "Build system", "hidden": false },
                      { "type": "style", "section": "Style improvements", "hidden": false },
                      { "type": "test", "section": "Test improvements", "hidden": false }

                    ]
                  }
                }
              ],
              "@semantic-release/github"
            ]
          }' > .releaserc

      - name: Create github release only
        if: "! inputs.create_pull_request"
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: |
            conventional-changelog-conventionalcommits@6.0.0
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
